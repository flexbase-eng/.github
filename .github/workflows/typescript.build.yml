name: Build
on:
  workflow_call:
    inputs:
      package_folder:
        required: false
        type: string
      use_packr:
        required: false
        type: boolean
        default: true
      major_version:
        required: false
        type: string
      minor_version:
        required: false
        type: string
      revision:
        required: false
        type: string
      package_manager:
        required: false
        type: string
        default: 'yarn'

env:
  PACKR_MAJOR_VERSION: 
  PACKR_MINOR_VERSION: 
  PACKR_REVISION: 

jobs:
  pr-labeler:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - uses: TimonVS/pr-labeler-action@v3
        with:
          configuration-path: .github/pr-labeler.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  packr-versions:
    name: Packr version modifier
    runs-on: ubuntu-latest
    steps:
    - name: Build major version env
      if: ${{ inputs.major_version != ''}}
      run: echo 'PACKR_MAJOR_VERSION=--major ${{ inputs.major_version }}' >> $GITHUB_ENV

    - name: Build minor version env
      if: ${{ inputs.minor_version != ''}}
      run: echo 'PACKR_MINOR_VERSION=--minor ${{ inputs.minor_version }}' >> $GITHUB_ENV

    - name: Build revision env
      if: ${{ inputs.revision != ''}}
      run: echo 'PACKR_REVISION=--revision ${{ inputs.revision }}' >> $GITHUB_ENV
  
  build-lint-test:
    name: Build/Lint/Test/Packr
    needs: [packr-versions]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 
    
    - uses: actions/setup-node@v3
      with:
        node-version: latest
        cache: ${{ inputs.package_manager }}

    - name: Create cli install command yarn
      if: inputs.package_manager == 'yarn'
      run: echo "CLI_INSTALL=yarn install --frozen-lockfile" >> $GITHUB_ENV
    
    - name: Create cli install command npm
      if: inputs.package_manager == 'npm'
      run: echo "CLI_INSTALL=npm run --ci" >> $GITHUB_ENV
    
    - name: Create cli build command yarn
      if: inputs.package_manager == 'yarn'
      run: echo "CLI_BUILD=yarn build" >> $GITHUB_ENV
    
    - name: Create cli build command npm
      if: inputs.package_manager == 'npm'
      run: echo "CLI_BUILD=npm run build" >> $GITHUB_ENV
    
    - name: Create cli lint command yarn
      if: inputs.package_manager == 'yarn'
      run: echo "CLI_LINT=yarn lint" >> $GITHUB_ENV
      
    - name: Create cli lint command npm
      if: inputs.package_manager == 'npm'
      run: echo "CLI_LINT=npm run lint" >> $GITHUB_ENV

    - name: Install dependencies
      run: ${{ env.CLI_INSTALL }}

    - name: Build app
      run: ${{ env.CLI_BUILD }}

    - name: Lint app
      run: ${{ env.CLI_LINT }}

    - name: Test yarn
      run: ${{ inputs.package_manager }} test

    - name: Packr
      if: ${{ inputs.use_packr == true }}
      run: yarn packr ${{ env.PACKR_MAJOR_VERSION }} ${{ env.PACKR_MINOR_VERSION }} ${{ env.PACKR_REVISION }}

  artifacts:
    name: Store artifacts   
    runs-on: ubuntu-latest
    needs: [build-lint-test]
    steps:
    - name: Store build artifacts
      if: ${{ inputs.package_folder != ''}}
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: ${{ inputs.package_folder }}
        retention-days: 1

    - name: Store coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: coverage/lcov.info
        retention-days: 1
